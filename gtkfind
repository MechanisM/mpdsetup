#!/usr/bin/env python
# Newer, shinier zenfind using Python!
# Coded on the night of Sat, Oct 24, 2009 (7:15 PM to be exact!)
# Last updated on Sat, Mar 27, 2010
# Jasper St. Pierre <jstpierre@mecheye.net>

# Requires:
#   
#   mpd >= 0.16
#   
#   mpd-python (latest development build)
#     found at http://git.thejat.be/python-mpd.git/
#
#   lepl >= 3.3
#     run 'easy_install lepl' to get it

import pygtk
pygtk.require('2.0')
import gtk

import sys
import os

from twisted.internet import gtk2reactor
gtk2reactor.install()

from twisted.internet import reactor, defer

from itertools import count

from query import search, play, run

RETURN_KEY, _ = gtk.accelerator_parse("Return")
ESCAPE_KEY, _ = gtk.accelerator_parse("Escape")

class GUI(object):
    
    def delete_event(self, widget, event, data=None):
        return False

    def destroy(self, widget=None, data=None):
        for id in self.ids:
            self.client.deleteid(id)
        reactor.stop()

    @defer.inlineCallbacks
    def do_search(self):
        
        query = self.entry.get_text()
        
        if not query:
            return
        
        results = yield search(query, self.client)
        self.liststore.clear()

        currentsong = yield self.client.currentsong()

        if len(results) == 1:
            yield play(results[0]['file'], self.client)
            self.destroy()
        else:
            for D in results:
                self.liststore.append((D['file'], D.get('artist', ''), D.get('album', ''), D.get('title', ''), D['file'] == currentsong['file']))

            if len(results) > 1:
                self.treeview.grab_focus()
                self.treeview.set_cursor((0,))
    
    def search_click(self, event):
        self.do_search()
    
    def window_key(self, widget, event):
        if event.keyval == ESCAPE_KEY:
            self.destroy()
    
    def treeview_key(self, widget, event):
        if event.keyval == RETURN_KEY:
            self.okay()

    def treeview_click(self, widget, event):
        if event.type == gtk.gdk._2BUTTON_PRESS:
            self.okay()
    
    def entry_key(self, widget, event):
        if event.keyval == RETURN_KEY:
            self.do_search()

    @defer.inlineCallbacks
    def okay(self, event=None):
        path, _ = self.treeview.get_cursor()
        if path:
            it = self.liststore.get_iter(path)
            filename = self.liststore.get_value(it, 0)
            if filename:
                yield play(filename, self.client)
        self.destroy()

    def set_sensitive(self, value):
        for child in self.entry, self.search, self.treeview, self.okay, self.cancel:
            child.set_sensitive(value)
    
    def enable(self):
        self.set_sensitive(True)
    
    def disable(self):
        self.set_sensitive(False)

    def is_playing(self, column, cell, model, it):
        if model.get_value(it, 4):
            cell.set_property('stock-id', gtk.STOCK_MEDIA_PLAY)
        else:
            cell.set_property('stock-id', '')
    
    def __init__(self, client):

        self.client = client
        
        self.ids = []
        self.window = window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        window.set_position(gtk.WIN_POS_CENTER)
        window.set_default_size(600, 400)
        window.set_border_width(10)
        window.set_title("GTKFind")
        window.set_icon_name("audio-x-generic")
        window.connect("destroy", self.destroy)
        window.connect("delete-event", self.delete_event)
        window.connect("key-release-event", self.window_key)
        
        self.entry = entry = gtk.Entry()
        entry.connect("key-release-event", self.entry_key)
        entry.show()
        entry.grab_focus()
        
        self.search = search = gtk.Button("Search")
        search.connect("clicked", self.search_click)
        search.show()
        
        self.hbox = hbox = gtk.HBox(spacing=10)
        hbox.pack_start(entry, expand=True)
        hbox.pack_start(search, expand=False)
        hbox.show()

        okay = gtk.Button("OK")
        okay.connect("clicked", self.okay)
        okay.show()
        
        cancel = gtk.Button("Cancel")
        cancel.connect("clicked", self.destroy)
        cancel.show()
        
        buttonbox = gtk.HButtonBox()
        buttonbox.set_layout(gtk.BUTTONBOX_END)
        buttonbox.pack_start(cancel, expand=False)
        buttonbox.pack_start(okay, expand=False)
        buttonbox.show()
        
        buttonalign = gtk.Alignment(xalign=1.0)
        buttonalign.add(buttonbox)
        buttonalign.show()
        
        self.liststore = liststore = gtk.ListStore(str, str, str, str, bool)
        self.treeview  = treeview  = gtk.TreeView(liststore)

        renderer = gtk.CellRendererPixbuf()
        col = gtk.TreeViewColumn("", renderer)
        col.set_sizing(gtk.TREE_VIEW_COLUMN_FIXED)
        col.set_fixed_width(24)
        col.set_cell_data_func(renderer, self.is_playing)
        treeview.append_column(col)
        
        for id, title in zip(count(1), ("Artist", "Album", "Title")):
            renderer = gtk.CellRendererText()
            
            col = gtk.TreeViewColumn(title, renderer, text=id)
            col.set_resizable(True)
            col.set_expand(True)
            col.set_sort_column_id(id)
            treeview.append_column(col)
        
        treeview.connect("key-release-event", self.treeview_key)
        treeview.connect("button-press-event", self.treeview_click)
        treeview.show()
        
        scroll = gtk.ScrolledWindow()
        scroll.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        scroll.set_shadow_type(gtk.SHADOW_IN)
        scroll.add(treeview)
        scroll.show()
        
        self.vbox = vbox = gtk.VBox(spacing=10)
        vbox.pack_start(hbox, expand=False)
        vbox.pack_start(scroll, expand=True)
        vbox.pack_start(buttonalign, expand=False)
        vbox.show()

        window.add(vbox)
        window.show()
        
if __name__ == "__main__":
    run(GUI)
